;frame Etapa e instancias
frame Etapa
    slot name
        type string
        default "Etapa default"
        cardinality 1
        required true
    slot precedeA
        type Etapa
        default none
        cardinality 0..1
        required false
    slot valorEsperado
        type float
        default 25.0
        cardinality 1
        required true
        daemon if-modified actualiarMinimoMaximo
            def actualiarMinimoMaximo(self):
                self.minimo = self.valorEsperado - self.tolerancia
                self.maximo = self.valorEsperado + self.tolerancia
    slot tolerancia
        type float
        default 5.0
        cardinality 1
        required true
        daemon if-modified actualiarMinimoMaximo
            def actualiarMinimoMaximo(self):
                self.minimo = self.valorEsperado - self.tolerancia
                self.maximo = self.valorEsperado + self.tolerancia
    slot minimo
        type float
        default 25.0
        cardinality 1
        required true
    slot maximo
        type float
        default 30.0
        cardinality 1
        required true

frame Enfriamiento
    instanceof Etapa
    slot name
        value "Enfriamiento"
    slot valorEsperado
        value 30.0
    slot tolerancia
        value 3.0

frame ProcesoTermico
    instanceof Etapa
    slot name
        value "Proceso Térmico"
    slot precedeA
        value Enfriamiento
    slot valorEsperado
        value 80.0
    slot tolerancia
        value 3.0

;frame Actuadores e instancias
frame Actuador
    slot name
        type string
        default "Actuador default"
        cardinality 1
        required true
    slot capacidad
        afecta Temperatura
        type float
        default 10.0
        cardinality 1
        required true
    slot activo #Prendido o Apagado
        type boolean
        default false
        cardinality 1
        required true
        daemon if-needed actualizarEstado
            def actualizarEstado(self):
                if self.activo:
                    self.estado = self.name + "Encendido"
                else:
                    self.estado = self.name + "Apagado"

frame Calefactor
    instanceof Actuador
    slot name
        value "Calefactor"
    slot capacidad
        value 1.0 # °C/min
    slot activo
       daemon if-neeeded actualizarEstadoCalefactor
            def actualizarEstadoCalefactor(self, corridaActual, ventilador):                
                # Está activo si la tendencia es positiva o si la tendencia es mayor a la capacidad del ventilador
                return corridaActual.temperaturaInterna.tendencia > 0 or 
                    corridaActual.temperaturaInterna.tendencia > ventilador.capacidad

frame Ventilador
    instanceof Actuador
    slot name
        value "Ventilador"
    slot capacidad
        value -0.5 # °C/min
    slot activo
        daemon if-neeeded actualizarEstadoVentilador
            def actualizarEstadoVentilador(self, corridaActual, calefactor):                
                # Está activo si la tendencia es positiva o si la tendencia es mayor a la capacidad del ventilador
                return corridaActual.temperaturaInterna.tendencia < 0 or 
                    corridaActual.temperaturaInterna.tendencia < calefactor.capacidad

;frame Lectura
frame Lectura
    slot name
        type string
        default "Lectura default"
        cardinality 1
        required true
    slot ts
        type datetime
        default "2024-01-01T00:00:00"
        cardinality 1
        required true
    slot temperaturaInterna
        type float
        default 20.0
        range 0.0..100.0
        cardinality 1
        required true
    slot tendencia
        type float
        default 0.0
        cardinality 1
        required true
    slot corrida
        type Corrida
        cardinality 1
        required true
    slot etapa
        type Etapa
        cardinality 1
        required true

;frame Temperatura
frame Temperatura
    slot name
        type string
        default "Temperatura Interna"
        cardinality 1
        required true
    slot valor
        type float
        default 20.0
        cardinality 1
        required true
        daemon if-modified borrarRecomendaciones
            def borrarRecomendaciones(self):
                self.corrida.recomendaciones = []
    slot ts 
        type datetime
        default "2024-01-01T00:00:00"
        cardinality 1
        required true
    slot unidad
        type string
        default "Celsius"
        cardinality 1
        required true
    slot tendencia # °C/min
        type float
        default 0.0
        cardinality 1
        required true
        daemon if-modified evaluarAlertaIncendio
            def evaluarAlertaIncendio(self):
                if self.tendencia > 30.0:
                    # Si la tendencia es mayor a 30.0 °C/min, se considera que se está produciendo un incendio
                    self.lectura.corrida.alertas.append(Incendio("Incendio", 
                        explicacion=f"La temperatura está aumentando rápidamente, lo que puede indicar un incendio. Temperatura actual: {self.valor} °C, Tendencia: {self.tendencia} °C/min"))
        daemon if-modified evaluarAlertaPuertaAbierta
            def evaluarAlertaPuertaAbierta(self):
                if self.tendencia < -10.0:
                    # Si la tendencia es menor a -10.0 °C/min, se considera que la puerta está abierta
                    self.lectura.corrida.alertas.append(PuertaAbierta("PuertaAbierta", 
                        explicacion=f"La temperatura está disminuyendo rápidamente, lo que puede indicar que la puerta está abierta. Temperatura actual: {self.valor} °C, Tendencia: {self.tendencia} °C/min"))
        daemon if-modified actualizarEstadosActuadores
            def actualizarEstadosActuadores(self):                
                # Si por defecto suponemos que ambos actuadores están apagados
                self.corrida.actuadores["Calefactor"].activo = False
                self.corrida.actuadores["Ventilador"].activo = False

                # Actualizar estados de los actuadores según la tendencia de temperatura
                if self.tendencia > 0:
                    # Si la tendencia es positiva, la temperatura está subiendo => Calefactor prendido
                    self.corrida.actuadores["Calefactor"].activo = True
                    if self.tendencia < self.corrida.actuadores["Calefactor"].capacidad:
                        #Si la tendencia es menor a la capacidad del calefactor, se considera que el calefactor está prendido y el ventilador también
                        self.corrida.actuadores["Ventilador"].activo = True
                if self.tendencia < 0:
                    # Si la tendencia es negativa, la temperatura está bajando => Ventilador prendido
                    self.corrida.actuadores["Ventilador"].activo = True
                    if self.tendencia > self.corrida.actuadores["Ventilador"].capacidad:
                        #Si la tendencia es mayor a la capacidad del ventilador, se considera que el ventilador está prendido y el calefactor también
                        self.corrida.actuadores["Calefactor"].activo = True
    slot estado
        type EstadoTemperatura
        default "TemperaturaEnRango"
        cardinality 1
        required true
    slot lectura
        type Lectura
        default none
        cardinality 1
        required true
        daemon if-modified actualizarEstadoTemperatura
            def actualizarEstadoTemperatura(self):
                if self.lectura.ts > self.ts:
                    #Si la lectura es más reciente que la temperatura, actualizar los valores
                    self.ts = self.lectura.ts
                    self.valor = self.lectura.temperaturaInterna
                    self.tendencia = self.lectura.tendencia

                if self.valor < self.lectura.etapa.minimo:
                    self.estado = "TemperaturaBaja"
                elif self.valor > self.lectura.etapa.maximo:
                    self.estado = "TemperaturaAlta"
                else:
                    self.estado = "TemperaturaEnRango"

; frame Corrida
frame Corrida
    slot name
        type string
        default "Corrida default"
        cardinality 1
        required true
    slot id
        type integer
        default 001
        cardinality 1
        required true
    slot fechaInicio
        type date
        default datetime.now()
        cardinality 0..1
        required true
    slot etapaActual
        type Etapa
        default ProcesoTermico
        cardinality 1
        required true
        daemon if-modified actualizarEstadoTemperatura
            def actualizarEstadoTemperatura(self):
                if self.temperaturaInterna.valor < self.etapaActual.minimo:
                    self.estado = "TemperaturaBaja"
                elif self.temperaturaInterna.valor > self.etapaActual.maximo:
                    self.estado = "TemperaturaAlta"
                else:
                    self.estado = "TemperaturaEnRango"
    slot fechaFin
        type date
        default none
        cardinality 0..1
        required false
    slot recomendaciones
        type list[Recomendaciones]
        default []
        cardinality 0..N
        required false
        daemon if-modified evaluarPrioridadReglas
            ; Ordenar recomendaciones por prioridad y resolver conflictos
    slot alertas
        type list[Alert]
        default []
        cardinality 0..N
        required false
    slot actuadores
        type list[Actuador]
        default [{Calefactor, Ventilador}]
        cardinality 0..N
        required false
    slot temperaturaInterna
        type Temperatura
        cardinality 1
        required true
        daemon if-modified evaluarReglaEncenderVentilador
            def evaluarReglaEncenderVentilador(self):
                if self.temperaturaInterna.estado = "TemperaturaAlta" and 
                    self.actuadores["Ventilador"].estado == "VentiladorApagado":
                    self.recomendaciones.append(EncenderVentilador())
        daemon if-modified evaluarReglaApagarVentilador
            def evaluarReglaApagarVentilador(self):
                if self.temperaturaInterna.estado = "TemperaturaEnRango" and 
                    self.actuadores["Ventilador"].estado == "VentiladorEncendido":
                    self.recomendaciones.append(ApagarVentilador())
        defaemon if-modified evaluarReglaEncenderCalefactor
            def evaluarReglaEncenderCalefactor(self):
                if self.temperaturaInterna.estado = "TemperaturaBaja" and 
                    self.actuadores["Calefactor"].estado == "CalefactorApagado":
                    self.recomendaciones.append(EncenderCalefactor())
        daemon if-modified evaluarReglaApagarCalefactor
            def evaluarReglaApagarCalefactor(self):
                if self.temperaturaInterna.estado = "TemperaturaEnRango" and 
                    self.actuadores["Calefactor"].estado == "CalefactorEncendido":
                    self.recomendaciones.append(ApagarCalefactor())
        daemon if-modified evaluarReglaMantenerEstadoActual
            def evaluarReglaMantenerEstadoActual(self):
                if self.temperaturaInterna.estado = "TemperaturaEnRango":
                    self.recomendaciones.append(MantenerEstadoActual())

;frame Alertas
frame Alerta
    slot name
        type string
        default "Alerta default"
        cardinality 1
        required true
    slot ts
        type datetime
        default datetime.now()
        cardinality 1
        required true
    slot activa
        type boolean
        default true
        cardinality 1
        required true
    slot explicacion
        type string
        default "Explicacion de la alerta"
        cardinality 1
        required true

frame PuertaAbierta
    typeof Alerta
    slot name
        value "PuertaAbierta"

frame Incendio
    typeof Alerta
    slot name
        value "Incendio"

;frame Recomendaciones
frame Recomendacion
    slot name
        type string
        default "Recomendacion default"
        cardinality 1
        required true
    slot ts #Va a ser propiedad de la relación
        type datetime
        default datetime.now()
        cardinality 1
        required true
    slot activa #Va a ser propiedad de la relación
        type boolean
        default true
        cardinality 1
        required true
    slot prioridad
        type integer
        default 1
        cardinality 1
        required true
    slot conflictaCon
        type list[Recomendacion]
        default []
        cardinality 0..N
        required true

frame EncenderVentilador
    instanceof Recomendacion
    requiere TemperaturaAlta
    requiere ¬Ventilador.activo
    slot name
        value "EncenderVentilador"
    slot prioridad
        value 9
    slot conflictaCon
        value [ApagarVentilador, MantenerEstadoActual]

frame ApagarVentilador
    instanceof Recomendacion
    requiere TemperaturaEnRango
    requiere Ventilador.activo
    slot name
        value "ApagarVentilador"
    slot prioridad
        value 8
    slot conflictaCon
        value [EncenderVentilador, MantenerEstadoActual]

frame EncenderCalefactor
    instanceof Recomendacion
    requiere TemperaturaBaja
    requiere ¬Calefactor.activo
    slot name
        value "EncenderCalefactor"
    slot prioridad
        value 9
    slot conflictaCon
        value [ApagarCalefactor, MantenerEstadoActual]

frame ApagarCalefactor
    instanceof Recomendacion
    requiere TemperaturaEnRango
    requiere Calefactor.activo
    slot name
        value "ApagarCalefactor"
    slot prioridad
        value 10
    slot conflictaCon
        value [EncenderCalefactor, MantenerEstadoActual]

frame MantenerEstadoActual
    instanceof Recomendacion
    requiere TemperaturaEnRango
    slot name
        value "MantenerEstadoActual"
    slot prioridad
        value 1
    slot conflictaCon
        value [EncenderVentilador, ApagarVentilador, EncenderCalefactor, ApagarCalefactor]