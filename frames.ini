;frame Rango
frame Rango
    slot name
        type string
        cardinality 1
        required true
    slot valorEsperado
        type float
        cardinality 1
        required true
        daemon if-modified actualizarMinimoMaximo
            def actualizarMinimoMaximo(self):
                self.minimo = self.valorEsperado - self.tolerancia
                self.maximo = self.valorEsperado + self.tolerancia
    slot tolerancia
        type float
        cardinality 1
        required true
        daemon if-modified actualizarMinimoMaximo
            def actualizarMinimoMaximo(self):
                self.minimo = self.valorEsperado - self.tolerancia
                self.maximo = self.valorEsperado + self.tolerancia
    slot minimo
        type float
        cardinality 1
        required false
    slot maximo
        type float
        cardinality 1
        required false

frame Temp80
    instanceof Rango
    slot name
        value "Rango de temperatura para proceso térmico"
    slot valorEsperado
        value 80.0
    slot tolerancia
        value 3.0

frame Temp30
    instanceof Rango
    slot name
        value "Rango de temperatura para enfriamiento"
    slot valorEsperado
        value 30.0
    slot tolerancia
        value 3.0


;frame Etapa e instancias
frame Etapa
    slot name
        type string
        cardinality 1
        required true
    slot precedeA
        type Etapa
        cardinality 0..1
        required false
    slot configuracionTemperatura
        type Rango
        cardinality 1
        required true

frame Enfriamiento
    instanceof Etapa
    slot name
        value "Enfriamiento"
    slot configuracionTemperatura
        value Temp30

frame ProcesoTermico
    instanceof Etapa
    slot name
        value "Proceso Térmico"
    slot precedeA
        value Enfriamiento
    slot configuracionTemperatura
        value Temp80

;frame Actuadores e instancias
frame Actuador
    slot name
        type string
        cardinality 1
        required true
    slot capacidad #°C/min
        afecta Lectura
        type float
        cardinality 1
        required true
    slot activo #Prendido o Apagado
        type boolean
        default false
        cardinality 1
        required true

frame Calefactor
    instanceof Actuador
    slot name
        value "Calefactor"
    slot capacidad
        value 1.0 # °C/min
    slot activo
       daemon if-needed actualizarEstadosActuadores

frame Ventilador
    instanceof Actuador
    slot name
        value "Ventilador"
    slot capacidad
        value -0.5 # °C/min
    slot activo
        daemon if-needed actualizarEstadosActuadores

;frame Lectura
frame Lectura
    slot name
        type string
        cardinality 1
        required true
    slot ts
        type datetime
        default datetime.now()
        cardinality 1
        required true
    slot temperaturaInterna
        type float
        range 0.0..100.0
        cardinality 1
        required true
        daemon if-added actualizarTemperatura
            def actualizarTemperatura(self):
                if self.ts > self.corrida.ultimaLectura.ts:
                    #Si la nueva lectura es la reciente, actualizar la relación
                    self.corrida.ultimaLectura = self
        daemon if-added actualizarEstadoTemperatura
            def actualizarEstadoTemperatura(self):
                if self.valor < self.etapa.configuracionTemperatura.minimo:
                    self.estado = "TemperaturaBaja"
                elif self.valor > self.etapa.configuracionTemperatura.maximo:
                    self.estado = "TemperaturaAlta"
                else:
                    self.estado = "TemperaturaEnRango"
    slot tendencia # °C/min
        type float
        default 0.0
        cardinality 1
        required true
    slot corrida
        type Corrida
        cardinality 1
        required true
        requires ¬corrida.fechaFin
        daemon if-needed getCorridaActual
            def getCorridaActual(self, corridaActual):
                return corridaActual
    slot etapa
        type Etapa
        cardinality 1
        required true
        daemon if-needed getEtapaActual
            def getEtapaActual(self):
                return self.corrida.etapaActual
    slot estado
        type Enum["TemperaturaBaja", "TemperaturaAlta", "TemperaturaEnRango"]
        default "TemperaturaEnRango"
        cardinality 1
        required true


; frame Corrida
frame Corrida
    slot name
        type string
        cardinality 1
        required true
    ; slot id
    ;     type string
    ;     cardinality 1
    ;     required true
    slot fechaInicio
        type date
        default datetime.now()
        cardinality 0..1
        required true
    slot etapaActual
        type Etapa
        default ProcesoTermico
        cardinality 1
        required true
    slot fechaFin
        type date
        cardinality 0..1
        required false
    slot recomendaciones
        type list[Recomendaciones]
        cardinality 0..N
        required false
        daemon if-modified evaluarPrioridadReglas
            ; Ordenar recomendaciones por prioridad y resolver conflictos
    slot alertas
        type list[Alert]
        cardinality 0..N
        required false
    slot actuadores
        type list[Actuador]
        default [{Calefactor, Ventilador}]
        cardinality 0..N
        required false
    slot ultimaLectura
        type Lectura
        cardinality 1
        required true
        daemon if-modified actualizarEstadosActuadores
            def actualizarEstadosActuadores(self):
                if self.corrida.ultimaLectura.ts < self.ts:
                    # Si la lectura creada es más reciente que la última lectura, actualizar los estados de los actuadores                
                    # Si por defecto suponemos que ambos actuadores están apagados
                    self.corrida.actuadores["Calefactor"].activo = False
                    self.corrida.actuadores["Ventilador"].activo = False

                    # Actualizar estados de los actuadores según la tendencia de temperatura
                    if self.tendencia > 0:
                        # Si la tendencia es positiva, la temperatura está subiendo => Calefactor prendido
                        self.corrida.actuadores["Calefactor"].activo = True
                        if self.tendencia < self.corrida.actuadores["Calefactor"].capacidad:
                            #Si la tendencia es menor a la capacidad del calefactor, se considera que el calefactor está prendido y el ventilador también
                            self.corrida.actuadores["Ventilador"].activo = True
                    if self.tendencia < 0:
                        # Si la tendencia es negativa, la temperatura está bajando => Ventilador prendido
                        self.corrida.actuadores["Ventilador"].activo = True
                        if self.tendencia > self.corrida.actuadores["Ventilador"].capacidad:
                            #Si la tendencia es mayor a la capacidad del ventilador, se considera que el ventilador está prendido y el calefactor también
                            self.corrida.actuadores["Calefactor"].activo = True
        daemon if-modified evaluarAlertaIncendio
            def evaluarAlertaIncendio(self):
                if self.corrida.ultimaLectura.ts < self.ts and self.tendencia > 30.0:
                    # Si la lectura creada es más reciente que la última lectura y la tendencia es mayor a 30.0 °C/min, se considera que se está produciendo un incendio
                    self.corrida.alertas.append(Incendio("Incendio", 
                        explicacion=f"La temperatura está aumentando rápidamente, lo que puede indicar un incendio. Temperatura actual: {self.valor} °C, Tendencia: {self.tendencia} °C/min"))
        daemon if-modified evaluarAlertaPuertaAbierta
            def evaluarAlertaPuertaAbierta(self):
                if self.corrida.ultimaLectura.ts < self.ts and self.tendencia < -10.0:
                    # Si la lectura creada es más reciente que la última lectura y la tendencia es menor a -10.0 °C/min, se considera que la puerta está abierta
                    self.corrida.alertas.append(PuertaAbierta("PuertaAbierta", 
                        explicacion=f"La temperatura está disminuyendo rápidamente, lo que puede indicar que la puerta está abierta. Temperatura actual: {self.valor} °C, Tendencia: {self.tendencia} °C/min"))
        daemon if-modified evaluarReglaEncenderVentilador
            def evaluarReglaEncenderVentilador(self):
                if self.ultimaLectura.estado = "TemperaturaAlta" and 
                    self.actuadores["Ventilador"].estado == "VentiladorApagado":
                    self.recomendaciones.append(EncenderVentilador())
        daemon if-modified evaluarReglaApagarVentilador
            def evaluarReglaApagarVentilador(self):
                if self.ultimaLectura.estado = "TemperaturaEnRango" and 
                    self.actuadores["Ventilador"].estado == "VentiladorEncendido":
                    self.recomendaciones.append(ApagarVentilador())
        daemon if-modified evaluarReglaEncenderCalefactor
            def evaluarReglaEncenderCalefactor(self):
                if self.ultimaLectura.estado = "TemperaturaBaja" and 
                    self.actuadores["Calefactor"].estado == "CalefactorApagado":
                    self.recomendaciones.append(EncenderCalefactor())
        daemon if-modified evaluarReglaApagarCalefactor
            def evaluarReglaApagarCalefactor(self):
                if self.ultimaLectura.estado = "TemperaturaEnRango" and 
                    self.actuadores["Calefactor"].estado == "CalefactorEncendido":
                    self.recomendaciones.append(ApagarCalefactor())
        daemon if-modified evaluarReglaMantenerEstadoActual
            def evaluarReglaMantenerEstadoActual(self):
                if self.ultimaLectura.estado = "TemperaturaEnRango":
                    self.recomendaciones.append(MantenerEstadoActual())

;frame Alertas
frame Alerta
    slot name
        type string
        cardinality 1
        required true
    slot ts
        type datetime
        default datetime.now()
        cardinality 1
        required true
    slot activa
        type boolean
        default true
        cardinality 1
        required true
    slot explicacion
        type string
        cardinality 1
        required true

frame PuertaAbierta
    typeof Alerta
    slot name
        default "PuertaAbierta"

frame Incendio
    typeof Alerta
    slot name
        default "Incendio"

;frame Recomendaciones
frame Recomendacion
    slot name
        type string
        cardinality 1
        required true
    ; slot ts #Va a ser propiedad de la relación
    ;     type datetime
    ;     default datetime.now()
    ;     cardinality 1
    ;     required true
    ; slot activa #Va a ser propiedad de la relación
    ;     type boolean
    ;     default true
    ;     cardinality 1
    ;     required true
    slot prioridad
        type integer
        default 1
        cardinality 1
        required true
    slot conflictaCon
        type list[Recomendacion]
        cardinality 0..N
        required false

frame EncenderVentilador
    instanceof Recomendacion
    requiere TemperaturaAlta
    requiere ¬Ventilador.activo
    slot name
        value "EncenderVentilador"
    slot prioridad
        value 9
    slot conflictaCon
        value [ApagarVentilador, MantenerEstadoActual]

frame ApagarVentilador
    instanceof Recomendacion
    requiere TemperaturaEnRango
    requiere Ventilador.activo
    slot name
        value "ApagarVentilador"
    slot prioridad
        value 8
    slot conflictaCon
        value [EncenderVentilador, MantenerEstadoActual]

frame EncenderCalefactor
    instanceof Recomendacion
    requiere TemperaturaBaja
    requiere ¬Calefactor.activo
    slot name
        value "EncenderCalefactor"
    slot prioridad
        value 9
    slot conflictaCon
        value [ApagarCalefactor, MantenerEstadoActual]

frame ApagarCalefactor
    instanceof Recomendacion
    requiere TemperaturaEnRango
    requiere Calefactor.activo
    slot name
        value "ApagarCalefactor"
    slot prioridad
        value 10
    slot conflictaCon
        value [EncenderCalefactor, MantenerEstadoActual]

frame MantenerEstadoActual
    instanceof Recomendacion
    requiere TemperaturaEnRango
    slot name
        value "MantenerEstadoActual"
    slot prioridad
        value 1
    slot conflictaCon
        value [EncenderVentilador, ApagarVentilador, EncenderCalefactor, ApagarCalefactor]